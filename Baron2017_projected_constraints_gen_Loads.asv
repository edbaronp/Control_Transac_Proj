%%%% Economic Dispatch with Projections
%%%% Baron-Prada2017

clc
clear all
a=0;
%%%% Inputs %%%%
%Graph Declaration%
nodes=8;
Edges=[ 1 2; 1 3; 2 4; 3 4;
    5 6; 5 7; 6 8; 7 8;
    1 5; 2 7; 3 6; 8 4];
power=ones(nodes,1);
%%%%% System global values%%%%%%%
Function_prom=zeros(1,nodes);
Global_cost=zeros(nodes,1);
Power_demanded=zeros(nodes,1);
Power_generated=zeros(nodes,1);
%%%%% Número de nodos
Number_generators=zeros(nodes,1);%Numero de generadores
Choose_gen=[1;1;1;1;1;1;1;1];%1=gen o 0=consumidores
%%%%%Separación vectores
xg=zeros(nodes,1);
power_aux=zeros(nodes,1);
%%%% Parametros simulación
iterations=90000;
alpha=0.5;
%Generator Charateristics
generation_cost=[1;2;3;4;3;3;3;1] ;
%Generation Constraints
Pmin=[1;1;1;1;1;1;1;1];
Pmax=[2000;3000;4000;5000;1;1;1;1];
%Rate of change
Rate_change=[0.3;0.3;0.3;0.3;1;1;1;1];
%Load
Load_1=[0;0;0;0;0;0;0;8000];
Load=Load_1;
asd=0;
%Projection
full_generators=zeros(nodes,1);
Gradient=zeros(1,nodes);

for k=1:iterations
    projection_generation=zeros(nodes,1);
    %%%%%%%%%%%%Demanded Power%%%%%
    if (k==30000)
        Load=[0;0;0;0;0;0;0;14000];
    end
    if (k==60000)
        Load=[0;0;0;0;0;0;0;10000];
    end
    %%%%%%%%%%%% Spanning Tree %%%%%%%%%%
    if(asd==0)
        Adjacency_Graph=Adjacency(Edges);
        Adjacency_MST=Adjacency(MST(Edges));
        asd=1;
    end
    %%%%%%%%%%% Finite- Time Distributed Averaging %%%%%%%%
    %%%%%%%%%%PD%%%%%%%%%%%
    Power_demanded(:,k)=DistCons(Load,Adjacency_MST);
    %%%%%%%%%%PG%%%%%%%%%%%
    Power_generated(:,k)=DistCons(power(:,k),Adjacency_MST);
    %%%%%%%%%%Cg%%%%%%%%
    if (mod(k,100)==0 || k==1)
        Global_cost(:,k)=DistCons(generation_cost(:).*power(:,k),Adjacency_MST)./Power_generated(:,k);
    else
        Global_cost(:,k)=Global_cost(:,k-1);
    end
    %%%%%%%%%%Nodes%%%%%%%%
    if (asd==0 || k==1)
        Number_generators(:,k)=DistCons(Choose_gen,Adjacency_MST);
    else
        Number_generators(:,k)=Number_generators(:,k-1);
    end
    
    %%%%%%%%%%%%%%%%Gradient variable algorithm%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%Consensus%%%%
    for j=1:nodes
        t=0;
        for i=1:nodes
            if(Adjacency_Graph(i,j)==1)
                Function_prom(1,j)=Function_prom(1,j)+power(i,k);
                t=t+1;
            end
        end
        Function_prom(1,j)=Function_prom(1,j)/t;
    end
    
    Anita(:,k)=Function_prom;
    
    
    %%%%%%%%%Update variables%%%%%%%%%%%
    for j=1:nodes
        if (Choose_gen(j)==0)
            Gradient(j)=1/Global_cost(j,k)*(1-power(j,k)/Pmax(j));
        else
            Gradient(j)= 1/generation_cost(j)*(1-power(j,k)/Pmax(j));
        end
    end
    
    
    %Falta cambiar cada función promedio por el correspondiente de cada una
    for i=1:nodes
        if(Choose_gen(i)==0)
            power(i,k+1)=-power(i,k)+(Function_prom(i)-alpha*Gradient(i));
        else
            power(i,k+1)=-power(i,k)+(Function_prom(i)-alpha*Gradient(i));
        end
    end
    
    %%%%Separación vectores consumidores y productores%%%
    for i=1:nodes
        if(Choose_gen(i)==0)
            power_aux(i,k+1)=power(i,k+1);%consumidores
            Power_demanded(:,k)=Power_demanded(:,k)+ones(nodes,1)*power_aux(i,k+1);
            Power_generated(:,k)=Power_generated(:,k)-ones(nodes,1)*power_aux(i,k+1);
        end
    end
    
    %%%%%Projected Constrains%%%%%
    
        %%%%% Local Rate of change constraint%%%%
    for e=1:nodes
        if(power(e,k+1)-power(e,k)>Rate_change(e))
            power(e,k+1)=power(e,k)+Rate_change(e);
        end
        if(power(e,k+1)-power(e,k)<-Rate_change(e))
            power(e,k+1)=power(e,k)-Rate_change(e);
        end
    end
    %%%%% Local Generation constraints%%%%
    for q=1:nodes
        if(power(q,k+1)<Pmin(q))
            power(q,k+1)=Pmin(q);
        end
    end
    
    for w=1:nodes
        if(power(w,k+1)>Pmax(w))
            power(w,k+1)=Pmax(w);
        end
    end
    
    
    %%Global Constraint____Only for generators%%
    if(Choose_gen
    for c=1:nodes
        if (Choose_gen(c)==1)
            power(c,k+1)= power(c,k+1)-(Power_generated(c,k)-Power_demanded(c,k))./Number_generators(c,k);
        end
    end
    
    %%%%% Local Rate of change constraint%%%%
    for e=1:nodes
        if(power(e,k+1)-power(e,k)>Rate_change(e))
            power(e,k+1)=power(e,k)+Rate_change(e);
        end
        if(power(e,k+1)-power(e,k)<-Rate_change(e))
            power(e,k+1)=power(e,k)-Rate_change(e);
        end
    end
    %%%%% Local Generation constraints%%%%
    for q=1:nodes
        if(power(q,k+1)<Pmin(q))
            power(q,k+1)=Pmin(q);
        end
    end
    
    for w=1:nodes
        if(power(w,k+1)>Pmax(w))
            power(w,k+1)=Pmax(w);
        end
    end
    
    
    %%Global Constraint with generators with maximum capacity%%
    for c=1:nodes
        if (isequal(power(c,k+1),Pmax(c))&& Choose_gen(c)==1)
            projection_generation(c)=projection_generation(c)+1;
        end
    end
    
    if(~isequal(projection_generation(:),zeros(1,nodes)))
        full_generators(:,k)=DistCons(projection_generation,Adjacency_MST);
        for j=1:nodes
            if (~isequal(power(j,k+1),Pmax(j))&& Choose_gen(j)==1)
                power(j,k+1)= power(j,k+1)-(Power_generated(j,k)-Power_demanded(j,k))./(Number_generators(j,k)-full_generators(j,k));
            end
        end
    end
    
    
    
    %%%%% Local Rate of change constraint%%%%
    for e=1:nodes
        if(power(e,k+1)-power(e,k)>Rate_change(e))
            power(e,k+1)=power(e,k)+Rate_change(e);
        end
        if(power(e,k+1)-power(e,k)<-Rate_change(e))
            power(e,k+1)=power(e,k)-Rate_change(e);
        end
    end
    %%%%% Local Generation constraints%%%%
    for q=1:nodes
        if(power(q,k+1)<Pmin(q))
            power(q,k+1)=Pmin(q);
        end
    end
    
    for w=1:nodes
        if(power(w,k+1)>Pmax(w))
            power(w,k+1)=Pmax(w);
        end
    end
    
    %v(:,k)=((ones(1,nodes)*power(:,k+1))*ones(nodes,1)-Power_demanded(:,k)-(ones(1,nodes)*power_aux(:,k+1))*ones(nodes,1))./Power_demanded(:,k)*100;
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Power_demanded(:,k+1)=Power_demanded(:,k);
subplot(2,2,1)
plot(transpose(power))
grid on
subplot(2,2,2)
plot(transpose(Global_cost))
grid on
subplot(2,2,3)
% p=plot(graph(Edges(:,1),Edges(:,2)));
% highlight(p,minspantree(graph(Edges(:,1),Edges(:,2))))
plot(transpose(full_generators))
grid on
subplot(2,2,4)
plot(transpose(Power_demanded))
grid on

(sum(power(:,20000))-Power_demanded(1,20000))/Power_demanded(1,20000)*100
(sum(power(:,40000))-Power_demanded(1,40000))/Power_demanded(1,40000)*100
(sum(power(:,k+1))-Power_demanded(1,k))/Power_demanded(1,k)*100
a